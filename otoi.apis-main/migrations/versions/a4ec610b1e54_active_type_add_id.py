"""Active-type add id

Revision ID: a4ec610b1e54
Revises: cbac691c562e
Create Date: 2025-08-25 19:41:47.649114

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a4ec610b1e54'
down_revision = 'cbac691c562e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add id columns to active_types and status_list as nullable first
    with op.batch_alter_table('active_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), autoincrement=True, nullable=True))
    
    with op.batch_alter_table('status_list', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), autoincrement=True, nullable=True))
    
    # Step 2: Create sequences and populate the id columns
    op.execute("CREATE SEQUENCE IF NOT EXISTS active_types_id_seq")
    op.execute("UPDATE active_types SET id = nextval('active_types_id_seq')")
    
    op.execute("CREATE SEQUENCE IF NOT EXISTS status_list_id_seq")
    op.execute("UPDATE status_list SET id = nextval('status_list_id_seq')")
    
    # Step 3: Drop foreign key constraints first
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.drop_constraint('active_active_type_uuid_fkey', type_='foreignkey')
    
    # Step 4: Update active table to use integer ids
    # Add temporary column to store the mapping
    op.add_column('active', sa.Column('temp_active_type_id', sa.Integer(), nullable=True))
    
    # Update the temp column with the new integer ids
    op.execute("""
        UPDATE active 
        SET temp_active_type_id = active_types.id 
        FROM active_types 
        WHERE active.active_type_uuid = active_types.uuid
    """)
    
    # Drop the old column
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.drop_column('active_type_uuid')
    
    # Rename temp column to active_type_id
    op.alter_column('active', 'temp_active_type_id', new_column_name='active_type_id')
    
    # Step 5: Make id columns NOT NULL and set as primary keys
    with op.batch_alter_table('active_types', schema=None) as batch_op:
        batch_op.alter_column('id', nullable=False)
        # Try to drop existing primary key
        try:
            batch_op.drop_constraint('active_types_pkey', type_='primary')
        except:
            try:
                batch_op.drop_constraint('pk_active_types', type_='primary')
            except:
                pass
        batch_op.drop_column('uuid')
        batch_op.create_primary_key('active_types_pkey', ['id'])
    
    with op.batch_alter_table('status_list', schema=None) as batch_op:
        batch_op.alter_column('id', nullable=False)
        # Try to drop existing primary key
        try:
            batch_op.drop_constraint('status_list_pkey', type_='primary')
        except:
            try:
                batch_op.drop_constraint('pk_status_list', type_='primary')
            except:
                pass
        batch_op.drop_column('uuid')
        batch_op.create_primary_key('status_list_pkey', ['id'])
    
    # Step 6: Create new foreign key
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'active_types', ['active_type_id'], ['id'], ondelete='SET NULL')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('status_list', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
        batch_op.drop_column('id')

    with op.batch_alter_table('active_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
        batch_op.drop_column('id')

    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('active_active_type_uuid_fkey', 'active_types', ['active_type_uuid'], ['uuid'], ondelete='SET NULL')
        batch_op.alter_column('active_type_uuid',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=True)

    # ### end Alembic commands ###
