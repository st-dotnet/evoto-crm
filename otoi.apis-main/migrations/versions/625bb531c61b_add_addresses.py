"""add addresses

Revision ID: 625bb531c61b
Revises: a4ec610b1e54
Create Date: 2025-08-26 16:38:09.250505

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '625bb531c61b'
down_revision = 'a4ec610b1e54'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_by', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('updated_by', sa.Integer(), nullable=True))
        # Add created_at with a temporary server_default to avoid NOT NULL violations on existing rows
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        # Add business_id as nullable first; we'll backfill and then set NOT NULL
        batch_op.add_column(sa.Column('business_id', sa.Integer(), nullable=True))
        batch_op.alter_column('address1',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
        batch_op.create_foreign_key(None, 'businesses', ['business_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'users', ['created_by'], ['id'], ondelete='SET NULL')
        batch_op.create_foreign_key(None, 'users', ['updated_by'], ['id'], ondelete='SET NULL')

    # Backfill data safely outside the batch context
    # 1) Drop server_default on created_at now that existing rows are populated
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.alter_column('created_at', server_default=None)

    # 2) Backfill business_id to 1 for existing NULLs (assumes Business with id=1 exists)
    op.execute("UPDATE addresses SET business_id = 1 WHERE business_id IS NULL")

    # 3) Set business_id to NOT NULL
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.alter_column('business_id', existing_type=sa.Integer(), nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.alter_column('address1',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
        batch_op.drop_column('business_id')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')
        batch_op.drop_column('updated_by')
        batch_op.drop_column('created_by')

    # ### end Alembic commands ###
