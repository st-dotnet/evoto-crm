"""Initial migration

Revision ID: 5f0b0908a96e
Revises: 
Create Date: 2025-08-22 15:44:07.760504

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '5f0b0908a96e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto-generated by Alembic - please adjust! ###
    
    # First, drop all foreign key constraints that reference the old ID columns
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.drop_constraint('active_active_type_id_fkey', type_='foreignkey')  # Dropping old foreign key
    
    # Add UUID columns to all tables first (as nullable)
    with op.batch_alter_table('active_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), nullable=True))  # Added UUID column as nullable first
    
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), nullable=True))  # Added UUID column as nullable first
        batch_op.add_column(sa.Column('active_type_uuid', sa.UUID(), nullable=True))  # Added active_type_uuid column
    
    # Populate UUID values for existing records
    op.execute("UPDATE active_types SET uuid = gen_random_uuid() WHERE uuid IS NULL")
    op.execute("UPDATE active SET uuid = gen_random_uuid() WHERE uuid IS NULL")
    
    # Make UUID columns NOT NULL
    with op.batch_alter_table('active_types', schema=None) as batch_op:
        batch_op.alter_column('uuid', nullable=False)  # Make UUID NOT NULL
    
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.alter_column('uuid', nullable=False)  # Make UUID NOT NULL
    
    # Now drop the old ID columns and other unnecessary columns
    with op.batch_alter_table('active_types', schema=None) as batch_op:
        batch_op.drop_column('id')  # Dropping old ID column
    
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.drop_column('active_type_id')  # Dropping old column
        batch_op.drop_column('LAId')  # Dropping unnecessary column

    # Create Foreign Key constraint with ON DELETE SET NULL (after active_types.uuid exists)
    op.execute('''
        ALTER TABLE active
        ADD CONSTRAINT fk_active_type_uuid FOREIGN KEY (active_type_uuid)
        REFERENCES active_types(uuid)
        ON DELETE SET NULL;
    ''')
    
    # Drop more foreign key constraints before proceeding
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.drop_constraint('businesses_address_id_fkey', type_='foreignkey')  # Dropping old foreign key
    
    with op.batch_alter_table('person_addresses', schema=None) as batch_op:
        batch_op.drop_constraint('person_addresses_person_id_fkey', type_='foreignkey')  # Dropping old foreign key
        batch_op.drop_constraint('person_addresses_address_id_fkey', type_='foreignkey')  # Dropping old foreign key
    
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.drop_constraint('persons_person_type_id_fkey', type_='foreignkey')  # Dropping old foreign key
    
    # Add UUID columns to all remaining tables
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), nullable=True))  # Added UUID column as nullable first
    
    with op.batch_alter_table('person_addresses', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), nullable=True))  # Added UUID column as nullable first
    
    with op.batch_alter_table('person_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), nullable=True))  # Added UUID column as nullable first
    
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), nullable=True))  # Added UUID column as nullable first
        batch_op.add_column(sa.Column('status', sa.String(length=80), nullable=False))  # Added status column
        batch_op.add_column(sa.Column('reason', sa.String(length=200), nullable=True))  # Added reason column
    
    with op.batch_alter_table('status_list', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), nullable=True))  # Added UUID column as nullable first
    
    # Populate UUID values for all tables
    op.execute("UPDATE addresses SET uuid = gen_random_uuid() WHERE uuid IS NULL")
    op.execute("UPDATE person_addresses SET uuid = gen_random_uuid() WHERE uuid IS NULL")
    op.execute("UPDATE person_types SET uuid = gen_random_uuid() WHERE uuid IS NULL")
    op.execute("UPDATE persons SET uuid = gen_random_uuid() WHERE uuid IS NULL")
    op.execute("UPDATE status_list SET uuid = gen_random_uuid() WHERE uuid IS NULL")
    
    # Make all UUID columns NOT NULL
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.alter_column('uuid', nullable=False)  # Make UUID NOT NULL
    
    with op.batch_alter_table('person_addresses', schema=None) as batch_op:
        batch_op.alter_column('uuid', nullable=False)  # Make UUID NOT NULL
    
    with op.batch_alter_table('person_types', schema=None) as batch_op:
        batch_op.alter_column('uuid', nullable=False)  # Make UUID NOT NULL
    
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.alter_column('uuid', nullable=False)  # Make UUID NOT NULL
    
    with op.batch_alter_table('status_list', schema=None) as batch_op:
        batch_op.alter_column('uuid', nullable=False)  # Make UUID NOT NULL
    
    # Drop all old ID columns
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.drop_column('id')  # Dropping old ID column
    
    with op.batch_alter_table('person_addresses', schema=None) as batch_op:
        batch_op.drop_column('id')  # Dropping unnecessary column
    
    with op.batch_alter_table('person_types', schema=None) as batch_op:
        batch_op.drop_column('id')  # Dropping old ID column
    
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.drop_column('id')  # Dropping unnecessary column
    
    with op.batch_alter_table('status_list', schema=None) as batch_op:
        batch_op.drop_column('id')  # Dropping old ID column
    
    # Update foreign key column types and recreate constraints
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.alter_column('address_id', existing_type=sa.INTEGER(), type_=sa.UUID(), existing_nullable=False)  # Changing column type
        batch_op.create_foreign_key(
            None, 'addresses', ['address_id'], ['uuid'], ondelete='CASCADE'  # Creating new foreign key
        )
    
    with op.batch_alter_table('person_addresses', schema=None) as batch_op:
        batch_op.alter_column('person_id', existing_type=sa.INTEGER(), type_=sa.UUID(), existing_nullable=False)  # Changing column type
        batch_op.alter_column('address_id', existing_type=sa.INTEGER(), type_=sa.UUID(), existing_nullable=False)  # Changing column type
        batch_op.create_foreign_key(
            None, 'addresses', ['address_id'], ['uuid'], ondelete='CASCADE'  # Creating new foreign key
        )
        batch_op.create_foreign_key(
            None, 'persons', ['person_id'], ['uuid'], ondelete='CASCADE'  # Creating new foreign key
        )
    
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.alter_column('person_type_id', existing_type=sa.INTEGER(), type_=sa.UUID(), existing_nullable=True)  # Changing column type
        batch_op.create_foreign_key(
            None, 'person_types', ['person_type_id'], ['uuid'], ondelete='SET NULL'  # Creating new foreign key
        )
    
    # ### end Alembic commands ###






def downgrade():
    # ### commands auto-generated by Alembic - please adjust! ###
    
    # Step 1: Drop the foreign key constraint first
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.drop_constraint('fk_active_type_uuid', type_='foreignkey')  # Drop the foreign key constraint if it exists
    
    # Step 2: Alter the 'active' table to drop UUID columns and restore old columns
    with op.batch_alter_table('active', schema=None) as batch_op:
        batch_op.drop_column('active_type_uuid')  # Drop the new UUID column
        batch_op.drop_column('uuid')  # Drop UUID column from the 'active' table
        batch_op.add_column(sa.Column('active_type_id', sa.INTEGER(), nullable=True))  # Restore the old active_type_id column
        batch_op.add_column(sa.Column('LAId', sa.INTEGER(), nullable=False))  # Restore the old LAId column

    # Step 3: Alter the 'active_types' table to restore the 'id' column and drop the 'uuid' column
    with op.batch_alter_table('active_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('active_types_id_seq'::regclass)"), autoincrement=True, nullable=False))  # Restore 'id'
        batch_op.drop_column('uuid')  # Drop UUID column

    # Step 3: Alter the 'addresses' table to restore the 'id' column and drop the 'uuid' column
    with op.batch_alter_table('addresses', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('addresses_id_seq'::regclass)"), autoincrement=True, nullable=False))  # Restore 'id'
        batch_op.drop_column('uuid')  # Drop UUID column

    # Step 4: Alter the 'businesses' table to restore the foreign key to 'addresses' (back to INTEGER)
    with op.batch_alter_table('businesses', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')  # Drop the current foreign key constraint
        batch_op.create_foreign_key('businesses_address_id_fkey', 'addresses', ['address_id'], ['id'], ondelete='CASCADE')  # Recreate the old foreign key to 'addresses'
        batch_op.alter_column('address_id', existing_type=sa.UUID(), type_=sa.INTEGER(), existing_nullable=False)  # Restore 'address_id' type to INTEGER

    # Step 5: Alter the 'person_addresses' table to revert column types and drop foreign keys
    with op.batch_alter_table('person_addresses', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')  # Drop foreign keys
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('person_addresses_address_id_fkey', 'addresses', ['address_id'], ['id'], ondelete='CASCADE')  # Recreate old foreign key to 'addresses'
        batch_op.create_foreign_key('person_addresses_person_id_fkey', 'persons', ['person_id'], ['id'], ondelete='CASCADE')  # Recreate old foreign key to 'persons'
        batch_op.alter_column('address_id', existing_type=sa.UUID(), type_=sa.INTEGER(), existing_nullable=False)  # Revert address_id back to INTEGER
        batch_op.alter_column('person_id', existing_type=sa.UUID(), type_=sa.INTEGER(), existing_nullable=False)  # Revert person_id back to INTEGER
        batch_op.drop_column('uuid')  # Drop UUID column

    # Step 6: Alter the 'person_types' table to drop 'uuid' and restore 'id'
    with op.batch_alter_table('person_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('person_types_id_seq'::regclass)"), autoincrement=True, nullable=False))  # Restore 'id'
        batch_op.drop_column('uuid')  # Drop 'uuid' column

    # Step 7: Alter the 'persons' table to drop new columns (status, reason, uuid) and revert person_type_id to INTEGER
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('persons_id_seq'::regclass)"), autoincrement=True, nullable=False))  # Restore 'id'
        batch_op.drop_constraint(None, type_='foreignkey')  # Drop foreign key constraint
        batch_op.create_foreign_key('persons_person_type_id_fkey', 'person_types', ['person_type_id'], ['id'], ondelete='SET NULL')  # Recreate old foreign key to 'person_types'
        batch_op.alter_column('person_type_id', existing_type=sa.UUID(), type_=sa.INTEGER(), existing_nullable=True)  # Restore person_type_id back to INTEGER
        batch_op.drop_column('status')  # Drop 'status' column
        batch_op.drop_column('reason')  # Drop 'reason' column
        batch_op.drop_column('uuid')  # Drop 'uuid' column

    # Step 8: Alter the 'status_list' table to restore 'id' and drop 'uuid'
    with op.batch_alter_table('status_list', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('status_list_id_seq'::regclass)"), autoincrement=True, nullable=False))  # Restore 'id'
        batch_op.drop_column('uuid')  # Drop UUID column

    # ### end Alembic commands ###
