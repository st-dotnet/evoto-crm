"""person-type

Revision ID: cbac691c562e
Revises: 5a661308d049
Create Date: 2025-08-25 19:30:25.265242

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cbac691c562e'
down_revision = '5a661308d049'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add id column as nullable first
    with op.batch_alter_table('person_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('id', sa.Integer(), autoincrement=True, nullable=True))
    
    # Step 2: Create a sequence and populate the id column
    op.execute("CREATE SEQUENCE IF NOT EXISTS person_types_id_seq")
    op.execute("UPDATE person_types SET id = nextval('person_types_id_seq')")
    
    # Step 3: Make id column NOT NULL (skip primary key creation for now)
    with op.batch_alter_table('person_types', schema=None) as batch_op:
        batch_op.alter_column('id', nullable=False)
    
    # Step 4: Update persons table to use integer ids
    # First, add a temporary column to store the mapping
    op.add_column('persons', sa.Column('temp_person_type_id', sa.Integer(), nullable=True))
    
    # Update the temp column with the new integer ids
    op.execute("""
        UPDATE persons 
        SET temp_person_type_id = person_types.id 
        FROM person_types 
        WHERE persons.person_type_id = person_types.uuid
    """)
    
    # Drop the old foreign key and column
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.drop_constraint('persons_person_type_id_fkey', type_='foreignkey')
        batch_op.drop_column('person_type_id')
        
    # Rename temp column to person_type_id
    op.alter_column('persons', 'temp_person_type_id', new_column_name='person_type_id')
    
    # Step 5: Drop the uuid column and existing primary key, then create new primary key
    with op.batch_alter_table('person_types', schema=None) as batch_op:
        # Try to drop existing primary key (may fail if name is different)
        try:
            batch_op.drop_constraint('person_types_pkey', type_='primary')
        except:
            # If that fails, try common variations
            try:
                batch_op.drop_constraint('pk_person_types', type_='primary')
            except:
                pass
        batch_op.drop_column('uuid')
        batch_op.create_primary_key('person_types_pkey', ['id'])
    
    # Create new foreign key
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'person_types', ['person_type_id'], ['id'], ondelete='SET NULL')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('persons', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('persons_person_type_id_fkey', 'person_types', ['person_type_id'], ['uuid'], ondelete='SET NULL')
        batch_op.alter_column('person_type_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=True)

    with op.batch_alter_table('person_types', schema=None) as batch_op:
        batch_op.add_column(sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False))
        batch_op.drop_column('id')

    # ### end Alembic commands ###
